$.(
    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'TRANSFORM FOR DEGREED METADATA';
    $comment := 'Author: Martin Holden';
    $comment := 'Date: 20-FEB-2020';
    $comment := '*******************************************************';
    $comment := '* 22-NOV-2019 - Deduplicate and sort the output of the';
    $comment := '* $keywordsArray function.';
    $comment := '* 22-NOV-2019 - Updated default mapping to Degreed types';
    $comment := '* 19-FEB-2020 - Use the new $extendedtitle function if available';
    $comment := '* created functionaly similar $localextendedTitle in transform';
    $comment := '* so can be tested in JSONata Excerciser';
    $comment := '* 19-FEB-2020 - Use Skillsoft as default value for Provider column';
    $comment := '* 20-FEB-2020 - Refactoring to add $degreedtitle and $degreedsummary';
    $comment := '* functions to make transform easier to maintain and read.';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Common Metadata Specific Variables';
    $comment := 'These are the values that can change the metadata specific';
    $comment := 'functions';

    $comment := '* Whether to use the extended description option';
    $comment := '* This combines the descripion and publication data';
    $comment := '* See the $metadataextendeddescription function below';
    $commonUseExtendedDescription := $exists($override.common.UseExtendedDescription) ? $override.common.UseExtendedDescription : true;

    $comment := '* The EOL characters to use for the Extended Description';
    $comment := '* See the $metadataextendeddescription function below';
    $commonExtendedDescriptionEOL := $exists($override.common.ExtendedDescriptionEOL) ? $override.common.ExtendedDescriptionEOL : '\r\n';

    $comment := '* The MAPPING between Percipio contentType.percipioType lowercase';
    $comment := '* and any additions to the link. default option to handle unknown types';
    $comment := '* Returned value (right side) is the string to append to the link';
    $comment := '* so for example to make a link chromeless include ?chromeless';
    $commonShareLinkParametersLookup := $exists($override.common.ShareLinkParametersLookup) ? $override.common.ShareLinkParametersLookup : {
        'audiobook' : '',
        'book' : '',
        'channel' : '',
        'course' : '',
        'linked_content': '',
        'video': '',
        'journey': '',
        'default': ''
    };

    $comment := '* The MAPPING between Percipio contentType.percipioType lowercase';
    $comment := '* and any additions to the link for MOBILE. default option to handle unknown types';
    $comment := '* Returned value (right side) is the string to append to the link';
    $comment := '* so for example to make a link chromeless include ?chromeless';
    $commonMobileShareLinkParametersLookup := $exists($override.common.MobileShareLinkParametersLookup) ? $override.common.MobileShareLinkParametersLookup : {
        'audiobook': '',
        'book': '',
        'channel': '',
        'course': '',
        'linked_content': '',
        'video': '',
        'journey': '',
        'default': ''
    };

    $comment := 'End of Common Metadata Specific Variables';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Degreed/Customer Specific Variables';
    $comment := 'These are the values that can be changed per customer';

    $comment := '* The MAPPING between Percipio contentType.percipioType lowercase';
    $comment := '* and the DEGREED content type. default option to handle unknown types';
    $degreedContentTypeLookup := $exists($override.degreed.contenttypelookup) ? $override.degreed.contenttypelookup : {
        'audiobook': 'Book',
        'book': 'Book',
        'channel': 'Course',
        'course': 'Course',
        'linked_content': 'Course',
        'video': 'Video',
        'journey': 'Course',
        'default': 'Course'
    };

    $comment := '* The number of TOPICn values to include set to 0 to not return any';
    $comment := '* For more information see the $degreedtopicsobject function above';
    $degreedMaxTopics := $exists($override.degreed.maxtopics) ? $override.degreed.maxtopics : 10;

    $comment := '* The default provider value';
    $degreedProvider := $exists($override.degreed.provider) ? $override.degreed.provider : 'Skillsoft';

    $comment := 'End of Degreed/Customer Specific Variables';
    $comment := '*******************************************************';
    $comment := '*******************************************************';


    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Generic Function Library';

    $comment := '*******************************************************';
    $comment := '* Converts a string such as description to plain string,by stripping out';
    $comment := '* HTML tags and HTML Entities';
    $comment := '* @param {string} $source';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $plainstring := function ($source) {(
        $htmltags := /<\/?([a-z0-9]*)\b[^>]*>?/;
        $dash := /[\u2010\u2013\u2014\u2015]|&(#8210;|#8211;|#8212;|#8213;|hyphen|dash|ndash;|mdash;|horbar;)/;
        $apos := /&(#8217;|apos;|rsquo;)|[\u2019|\u8217]/;
        $copy := /[\u00A9]|&(#169;|copy;)/;
        $tm := /[\u2122]|&(#8482;|trade;)/;
        $registered := /[\u00AE]|&(#174;|reg;)/;
        $curylydoublequotes := /[\u201C\u201D\u201E\u201F\u2033\u2036]|&(ldquo;|rdquo;)/;
        $pipe := /[\u007c]|&(verbar;|vert;|VerticalLine;)/;
        $nbsp := /[\u00A0]|&(#160;|#xA0;|nbsp;)/;
        $otherentities := /&(#?[\w\d]+;)/;

        $result := $source ? $trim($source) : '';
        $result := $replace($result, $pipe, '-');
        $result := $replace($result, $htmltags, '');
        $result := $replace($result, $dash, '-');
        $result := $replace($result, $copy, '(c)');
        $result := $replace($result, $registered, '(r)');
        $result := $replace($result, $tm, '(tm)');
        $result := $replace($result, $apos, '\u0027');
        $result := $replace($result, $curylydoublequotes, '\u0022');
        $result := $replace($result, $nbsp, ' ');
        $result := $replace($result, $otherentities, '');
        $result;
    )};

    $comment := '*******************************************************';
    $comment := '* Shortens a string at a word boundary to the specified length, option to';
    $comment := '* define suffix to show this such as ...';
    $comment := '* @param {string} $source';
    $comment := '* @param {number} $maxlength - The maximum length, if $ellipsisString is';
    $comment := '*                                 the overall length allows for this';
    $comment := '* @param {string} $ellipsisString - The suffix to use';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $ellipsis := function ($source, $maxlength, $ellipsisString) {(
        $wordboundary := /\s(\w+)$/;
        $trimlength := $maxlength - $length($ellipsisString);

        $needtrim := ($length($source) > $maxlength);
        $trimmedSource := $needtrim ? $trim($substring($source, 0, $trimlength));

        $trimmedSource := $replace($trimmedSource, $wordboundary, '') & $ellipsisString;
        $needtrim ? $trimmedSource : $source;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a numeric value of total seconds';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';
    $isodurationtoseconds := function ($isoduration) {(
        $input := $isoduration = null ? '' : $isoduration;
        $time := $substringAfter($input, 'T');
        $hours := $contains($time, 'H') ? $substringBefore($time, 'H') : '0';
        $remainder := $substringAfter($time, 'H');
        $minutes := $contains($remainder, 'M') ? $substringBefore($remainder, 'M') : '0';
        $remainder := $substringAfter($remainder, 'M');
        $seconds := $contains($remainder, 'S') ? $substringBefore($remainder, 'S') : '0';
        $result := (($number($hours) * 3600) + ($number($minutes) * 60) + $number($seconds));
        $result;
    )};

    $comment := 'End of Generic Function Library';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Metadata Specific Functions';
    $comment := 'These are the functions common for metadata transforms';
    $comment := 'Source JSON object to be processed is one returned by:';
    $comment := ' - Scheduled Task - CONTENT_EXPORT';
    $comment := ' - API Call - content-discovery/v1/organizations/{orgId}/catalog-content';

    $comment := '*******************************************************';
    $comment := '* Emulates the Skillsoft $extendedTitle function';
    $comment := '* The plain text version of the localizedMetadata[0].title';
    $comment := '* Prefixed with technologies[0].title and';
    $comment := '* technologies[0].version followed by :';
    $comment := '* If title already includes : just return title';
    $comment := '* @param {string} $assetTitle - The localized title string';
    $comment := '* @param {object} $row - The current object';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $localextendedTitle := function ($assetTitle, $row) {(
        $addtechnology := $contains($assetTitle, ':') ? false : true;
        $technologystring := $addtechnology ? ($row.technologies[0].title ? $row.technologies[0].title & ($row.technologies[0].version? ' ' & $row.technologies[0].version)& ': ');
        
        $addtechnology ? $technologystring & $assetTitle : $assetTitle;
    )};

    $comment := '*******************************************************';
    $comment := '* Plain text version of the localizedMetadata[0].description.';
    $comment := '* and if defined add, delimited by $eol:';
    $comment := '*     Comma Delimited list of Authors from by';
    $comment := '*     Copyright Publisher and date from publication.publisher';
    $comment := '*     and publication.copyrightYear';
    $comment := '*     ISBN from publication.isbn';
    $comment := '* Shortened to $length with ellipsis string of ...';
    $comment := '* @param {number} [$length=2000] - Maximum length';
    $comment := '* @param {string} [$eol=\r\n] - The EOL characters to use';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $metadataextendeddescription := function ($length, $eol) {(
        $maxlength := $length ? $length : 2000;
        $myeol := $eol ? $eol : '\r\n';
        $by := $count(by) = 0 ? '' : 'By: ' & $join(by, ', ') & $myeol;

        $publisher := publication ? publication.publisher ? $join(['Copyright:', publication.publisher], ' ') : '' : '';
        $year := publication ? publication.copyrightYear ? $join(['(c)', $string(publication.copyrightYear)], ' ') : '' : '';
        $copyright := publication ? $join([$publisher, $year], ' ') & $myeol : '';
        $isbn := publication ? publication.isbn ? $join(['ISBN:', publication.isbn], ' ') & $myeol : '' : '';

        $publication := publication ? $join([$copyright, $isbn]) : '';

        $ellipsis($join([$by, $publication, $plainstring(localizedMetadata[0].description)]), $maxlength, ' ...');
    )};

    $comment := '*******************************************************';
    $comment := '* Plain text version of the localizedMetadata[0].description.';
    $comment := '*  Shortened to $length with ellipsis string of ...';
    $comment := '* @param {number} [$length=2000] - Maximum length';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $metadatadescription := function ($length) {(
        $maxlength := $length ? $length : 2000;
        $ellipsis($plainstring(localizedMetadata[0].description), $maxlength, ' ...');
    )};

    $comment := '*******************************************************';
    $comment := '* Enhanced sharelink combining the link and any query';
    $comment := '* string parameters based on contentType.percipioType';
    $comment := '* in lowercase lookup against $lookupValues';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $metadatasharelink := function ($lookupValues) {(
        $urlparameter := $exists($lookupValues) ? $lookup($lookupValues, $lowercase(contentType.percipioType)) : null;
        $urlparameter := $urlparameter ? $urlparameter : $exists($lookupValues) ? $lookup($lookupValues, 'default') : '';

        link & $urlparameter;
    )};

    $comment := 'End of Metadata Specific Functions';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Degreed/Customer Specific Functions';

    $comment := '*******************************************************';
    $comment := '* Create a string[] that is deduplicated of values that combines these';
    $comment := '* data values:';
    $comment := '*   localizedMetadata[0].title if contentType.percipioType is channel or journey';
    $comment := '*   keywords';
    $comment := '*   associations.areas';
    $comment := '*   associations.subjects';
    $comment := '*   associations.channels[*].title';
    $comment := '*   $otherKeyword variable';
    $comment := '* @param {string} [$otherKeyword=] - Additional Keyword to include';
    $comment := '* @returns {string[]}';
    $comment := '*******************************************************';
    $degreedkeywordsarray := function ($otherKeyword) {(
        $keywords := [];

        $keywords := $lowercase(contentType.percipioType) = 'channel' ? $append($keywords, [localizedMetadata[0].title]) : $keywords;

        $keywords := $lowercase(contentType.percipioType) = 'journey' ? $append($keywords, [localizedMetadata[0].title]) : $keywords;

        $keywords := keywords ? $append($keywords, keywords) : $keywords;

        $keywords := $append($keywords, $map(associations.areas, function ($v, $i, $a) {
                $v ? $trim($v) : ''
            }));

        $keywords := $append($keywords, $map(associations.subjects, function ($v, $i, $a) {
                $v ? $trim($v) : ''
            }));

        $keywords := $append($keywords, $map(associations.channels, function ($v, $i, $a) {
                $v.title ? $trim($v.title) : ''
            }));

        $keywords := $otherKeyword ? $append($keywords, [$otherKeyword]) : $keywords;

        $keywords := $map($sort($keywords), function ($v, $i, $a) {
            $i != 0 ? (($v = $a[$i - 1]) ? '' : $v) : $v
        });


        $keywords := $filter($keywords, function ($v, $i, $a) {
            $v != ''
        });

        $sort($keywords);
    )};

    $comment := '*******************************************************';
    $comment := '* Create JSON object with TOPICn keys for populating TOPICS in Degreed';
    $comment := '* the values are derived from $degreedkeywordsarray() function.';
    $comment := '* The values are shortened to maximum 255 characters as per Degreed spec';
    $comment := '* The shortened value if it ends with &:- or open bracket is trimmed.';
    $comment := '* @param {number} [$maxCount=10] - The max number of TAGn keys';
    $comment := '* @returns {Object}';
    $comment := '*******************************************************';
    $degreedtopicsobject := function ($maxCount) {(
        $topicmaxlength := 255;
        $maxtopics := $maxCount ? $maxCount : 10;
        $padarray := [1..$maxtopics].('');

        $topics := $degreedkeywordsarray();

        $topics := $map($topics, function ($v, $i, $a) {
            (
                $badendofline := /(([&:-]|[\x28])$)/;
                $result := $v ? $ellipsis($v, $topicmaxlength, '') : '';
                $result := $replace($result, $badendofline, '');
                $trim($result))
        });

        $topics := $append($topics, $padarray);

        $topics := $filter($topics, function ($v, $i, $a) {
            $i < $maxtopics
        });

        $convert_to_TOPICn_values := $map($topics, function ($v, $i, $a) { {
                'TOPIC' & ($i + 1): $v
            }
        });

        $convert_to_TOPICn_values;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to the relevant numeric value needed for the different Degreed content';
    $comment := '* types.';
    $comment := '* @returns {number|string}';
    $comment := '*******************************************************';
    $degreedduration := function () {(
        $seconds := $isodurationtoseconds(duration);
        $prec := 1;

        $degreedType := $lookup($degreedContentTypeLookup, $lowercase(contentType.percipioType));

        $result := $lookup([{
                    'course': $round($seconds / 3600, $prec),
                    'video': $round($seconds / 60, $prec)
                }
            ], $lowercase($degreedType));
        $result ? $result : ''
    )};


    $comment := '*******************************************************';
    $comment := '* Formats the title for Degreed, it uses the';
    $comment := '* localizedMetadata[0].title and the technologies[0]';
    $comment := '* values. The length is trimmed to 254 characters.';
    $comment := '* It uses the Skillsoft $extendedTitle function if available';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $degreedtitle := function () {(
        $maxlength := 254;
        $useSkillsoftLibraryFunction := $exists($extendedTitle);
        $title := $useSkillsoftLibraryFunction ? $extendedTitle(localizedMetadata[0].title, $) : $localextendedTitle(localizedMetadata[0].title, $);
        $ellipsis($title, $maxlength, ' ...');
    )};

    $comment := '*******************************************************';
    $comment := '* Formats the summary for Degreed, it uses the';
    $comment := '* localizedMetadata[0].description. The length is trimmed';
    $comment := '* to 2000 characters and any HTML converted to plaintext';
    $comment := '* If $commonUseExtendedDescription=true and publication != null';
    $comment := '* it will include the publication information and author';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $degreedsummary := function () {(
        $maxlength := 2000;
        $summary := localizedMetadata[0].description ? ($commonUseExtendedDescription ? $metadataextendeddescription( $maxlength, $commonExtendedDescriptionEOL) : $metadatadescription( $maxlength)) :'';
        $summary;
    )};

    $comment := 'End of Degreed/Customer Specific Functions';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'START OF TRANSFORM';

    $comment := '*******************************************************';
    $comment := 'Transform the basic data, uses the CONSTANTS specified above';

    $transformed_data := (
        $.{
        'ContentType': (
            $localType := $lookup($degreedContentTypeLookup, $lowercase(contentType.percipioType));
            $localType := $localType ? $localType : $lookup($degreedContentTypeLookup, 'default');

            $localType ? $localType : ''
        ),
        'ContentID': xapiActivityId,
        'URL': $metadatasharelink($commonShareLinkParametersLookup),
        'Delete': lifecycle.status = 'ACTIVE' ? 'N' : 'Y',
        'Title': $degreedtitle(),
        'Summary': $degreedsummary(),
        'ImageURL': imageUrl ? imageUrl : '',
        'Duration': $degreedduration(),
        'Language': localeCodes[0] ? $substringBefore(localeCodes[0], '-') : 'en',
        'Provider': $degreedProvider
    });

    $comment := '*******************************************************';
    $comment := 'Combine the :';
    $comment := '   $transformed_data - Basic transfomed data';
    $comment := '   $degreedtopicsobject - The TOPICn data derived from the function';
    $comment := '                        if $degreedMaxTopics != 0';

    $topics := $degreedMaxTopics = 0 ? [] : $degreedtopicsobject($degreedMaxTopics);

    $results := $merge([$transformed_data, $topics]);
    $results;
)
