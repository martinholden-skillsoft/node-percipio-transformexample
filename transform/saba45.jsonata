$.(
    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'TRANSFORM FOR SABA RELEASE 45';
    $comment := 'Author: Martin Holden';
    $comment := 'Date: 08-AUG-2019';
    $comment := '*******************************************************';
    $comment := '*******************************************************';


    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Global Constants';
	
    $globalMaxCount := 5;
    
    $comment := 'End of Global Constants';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Generic Function Library';

    $comment := '*******************************************************';
    $comment := '* Converts a string such as description to plain string,by stripping out';
    $comment := '* HTML tags and HTML Entities';
    $comment := '* @param {string} $source';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $plainstring := function ($source) {(
        $htmltags := /<\/?([a-z0-9]*)\b[^>]*>?/;
        $dash := /[\u2010\u2013\u2014\u2015]|&(#8210;|#8211;|#8212;|#8213;|hyphen|dash|ndash;|mdash;|horbar;)/;
        $apos := /&(#8217;|apos;|rsquo;)/;
        $copy := /[\u00A9]|&(#169;|copy;)/;
        $tm := /[\u2122]|&(#8482;|trade;)/;
        $registered := /[\u00AE]|&(#174;|reg;)/;
        $curylydoublequotes := /[\u201C\u201D\u201E\u201F\u2033\u2036]|&(ldquo;|rdquo;)/;
        $pipe := /[\u007c]|&(verbar;|vert;|VerticalLine;)/;
        $nbsp := /[\u00A0]|&(#160;|#xA0;|nbsp;)/;
        $otherentities := /&(#?[\w\d]+;)/;

        $result := $source ? $trim($source) : '';
        $result := $replace($result, $pipe, '-');
        $result := $replace($result, $htmltags, '');
        $result := $replace($result, $dash, '-');
        $result := $replace($result, $copy, '(c)');
        $result := $replace($result, $registered, '(r)');
        $result := $replace($result, $tm, '(tm)');
        $result := $replace($result, $apos, $base64decode('Jw=='));
        $result := $replace($result, $curylydoublequotes, '"');
        $result := $replace($result, $nbsp, ' ');
        $result := $replace($result, $otherentities, '');
        $result; 
    )};

    $comment := '*******************************************************';
    $comment := '* Shortens a string at a word boundary to the specified length, option to';
    $comment := '* define suffix to show this such as ...';
    $comment := '* @param {string} $source';
    $comment := '* @param {number} $maxlength - The maximum length, if $ellipsisString is';
    $comment := '*                                 the overall length allows for this';
    $comment := '* @param {string} $ellipsisString - The suffix to use';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $ellipsis := function ($source, $maxlength, $ellipsisString) {(
        $wordboundary := /\s(\w+)$/;
        $trimlength := $maxlength - $length($ellipsisString);

        $needtrim := ($length($source) > $maxlength);
        $trimmedSource := $needtrim ? $trim($substring($source, 0, $trimlength));

        $trimmedSource := $replace($trimmedSource, $wordboundary, '') & $ellipsisString;
        $needtrim ? $trimmedSource : $source;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a numeric value of total seconds';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';    
    $isodurationtoseconds := function ($isoduration) {(
        $input := $isoduration = null ? '' : $isoduration;
        $time := $substringAfter($input, 'T');
        $hours := $contains($time, 'H') ? $substringBefore($time, 'H') : '0';
        $remainder := $substringAfter($time, 'H');
        $minutes := $contains($remainder, 'M') ? $substringBefore($remainder, 'M') : '0';
        $remainder := $substringAfter($remainder, 'M');
        $seconds := $contains($remainder, 'S') ? $substringBefore($remainder, 'S') : '0';

        $result := (($number($hours) * 3600) + ($number($minutes) * 60) + $number($seconds));
        $result;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a numeric value of total minutes, to the specified precision';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @param {number} [$precision=2] - The precision';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';  
    $isodurationtominutes := function ($isoduration, $precision) {(
        $seconds := $isodurationtoseconds($isoduration);
        $prec := $exists($precision) ? $precision : 2;
        $result := $seconds = 0 ? 0 : $round($seconds / 60, $prec);
        $result;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a numeric value of total hours, to the specified precision';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @param {number} [$precision=2] - The precision';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';  
    $isodurationtohours := function ($isoduration, $precision) {(
        $seconds := $isodurationtoseconds($isoduration);
        $prec := $exists($precision) ? $precision : 2;
        $result := $seconds = 0 ? 0 : $round($seconds / 3600, $prec);
        $result;
    )};


    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a string in format hh:mm. No rounding so example would be 01:34';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';  
    $isodurationtohhmm := function ($isoduration) {(
        $input := $isoduration = null ? 'PT0H0M0S' : $isoduration;
		    $time := $substringAfter($input, 'T');
		    $hours := $contains($time, 'H') ? $substringBefore($time, 'H') : '00';
		    $remainder := $contains($time, 'H') ? $substringAfter($time, 'H') : $time;
		    $minutes := $contains($remainder, 'M') ? $substringBefore($remainder, 'M') : '00';
		    $remainder := $substringAfter($remainder, 'M'); $seconds := $contains($remainder, 'S') ? $substringBefore($remainder, 'S') : '00';
		    $result := $pad($hours, -2, '0') & ':' & $pad($minutes, -2, '0');
        $result;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a string in format hh:mm:ss. So example would be 01:34:56';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';  
    $isodurationtohhmmss := function ($isoduration) {(
        $input := $isoduration = null ? 'PT0H0M0S' : $isoduration;
		    $time := $substringAfter($input, 'T');
		    $hours := $contains($time, 'H') ? $substringBefore($time, 'H') : '00';
		    $remainder := $contains($time, 'H') ? $substringAfter($time, 'H') : $time;
		    $minutes := $contains($remainder, 'M') ? $substringBefore($remainder, 'M') : '00';
		    $remainder := $substringAfter($remainder, 'M'); $seconds := $contains($remainder, 'S') ? $substringBefore($remainder, 'S') : '00';
		    $result := $pad($hours, -2, '0') & ':' & $pad($minutes, -2, '0') & ':' & $pad($seconds, -2, '0');
        $result;
    )};


    $comment := '*******************************************************';
    $comment := '* Take an array of objects, and return a JSON object where:';
    $comment := '*      JSON Key is $prefix with incrementing value e.g. KEY1, KEY2';
    $comment := '*      JSON Value is the value e.g. en-us, or if array of objects a';
    $comment := '*        $delimiter delimited string. e.g. en-us|Title1|Description1';
    $comment := '* @param {string} $source - The array';
    $comment := '* @param {string} $prefix - The prefix to use as the JSON Key';
    $comment := '* @param {number} [$maxCount=$globalMaxCount|10] - The number of Keys';
    $comment := '* @param {string} [$delimiter=|] - The delimiter for Object strings';
    $comment := '* @returns {Object}';
    $comment := '*******************************************************';  
	$flattenArrayAndObject := function($source, $prefix, $maxCount, $delimiter) {(
    	$maxCount := $maxCount ? $maxCount : $globalMaxCount ? $globalMaxCount : 10;
        $delimiter := $delimiter ? $delimiter : '|';

		$padarray := [1..$maxCount].('');
		$sourceArray := $count($source)=0 ? [] : [];
        $result := '';
        
		$sourceArray := $append($sourceArray, $map($source, function ($v, $i, $a) {(
        		$model := $count($keys($v)) > 0 ? $v : { 'key': $v ? $v : '' };
                $needdelimiter:= $count($keys($v)) > 0 ? $delimiter : '';
                $trimend:= $count($keys($v)) > 0;
        		$kv := $spread($model);
               	$result:= $reduce($kv, function($accum, $val) {(
                	$accum & $each($val, function($val, $key) {$val}) & $needdelimiter;
                )}, '');
                $trimend ? $substring($result,0,$length($result)-1) : $result;
        )})
        );

		$sourceArray := $filter($sourceArray, function ($v, $i, $a) {
				$v != ''
		});

		$sourceArray := $append($sourceArray, $padarray);
	
		$sourceArray := $filter($sourceArray, function ($v, $i, $a) {
				$i < $maxCount
		});

		$sourceArrayDelimited := $map($sourceArray, function ($v, $i, $a) {
				$prefix & ($i + 1) & '~|~' & $v
		});

		$sourceArrayDelimited.{
				$substringBefore('~|~'): $substringAfter('~|~')
		}
    )};

    $comment := 'End of Generic Function Library';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Saba Release 45 Specific Functions for use in transform';

    $comment := '*******************************************************';
    $comment := '* Combine the the contentType.display and plain text version of the';
    $comment := '* localizedMetadata[0].title. Shortened to $length with ellipsis string';
    $comment := '* of ...';
    $comment := '* @param {number} [$length=255] - Maximum length';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';  
    $sabatitle := function($length){(
        $maxlength:= $length ? $length : 255;
        $ellipsis('(' & contentType.displayLabel & ') ' & $plainstring(localizedMetadata[0].title), $maxlength, ' ...');
    )};

    $comment := '*******************************************************';
    $comment := '* Plain text version of the localizedMetadata[0].title. Shortened to';
    $comment := '* $length with ellipsis string of ...';
    $comment := '* @param {number} [$length=200] - Maximum length';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $sabadescription := function($length){(
        $maxlength:= $length ? $length : 2000;
        $ellipsis($plainstring(localizedMetadata[0].description), $maxlength, ' ...');
    )};

    $comment := '*******************************************************';
    $comment := '* Create a string[] that is deduplicated of values that combines these';
    $comment := '* data values:';
    $comment := '*   localizedMetadata[0].title if contentType.percipioType is channel';
    $comment := '*   keywords';
    $comment := '*   associations.areas';
    $comment := '*   associations.subjects';
    $comment := '*   associations.channels[*].title';
    $comment := '*   $otherKeyword variable';
    $comment := '* @param {string} [$otherKeyword=] - Additional Keyword to include';
    $comment := '* @returns {string[]}';
    $comment := '*******************************************************';
    $sabakeywordsarray := function($otherKeyword){(
        $keywords :=  $lowercase(contentType.percipioType) = 'channel' ? [localizedMetadata[0].title] : [];

        $keywords := keywords ? $append($keywords,keywords) : $keywords;

        $keywords := $append($keywords, $map(associations.areas, function($v, $i, $a) {
                $v ? $trim($v) : ''
        }));
          
        $keywords := $append($keywords, $map(associations.subjects, function($v, $i, $a) {
        	$v ? $trim($v) : ''
		}));

        $keywords := $append($keywords, $map(associations.channels, function($v, $i, $a) {
                $v.title ? $trim($v.title) : ''
        }));

        $keywords := $otherKeyword ? $append($keywords, [ $otherKeyword]) : $keywords;
        
        $keywords := $map($sort($keywords),function($v, $i, $a){
            $i != 0 ? (( $v = $a[$i-1] ) ? '': $v) : $v }
        );
      
        $keywords := $filter($keywords, function($v, $i, $a) {
            $v != ''
        });

        $keywords
    )};

    $comment := '*******************************************************';
    $comment := '* Create JSON object with TAGn keys for populating TAGS in Saba';
    $comment := '* the values are derived from $sabakeywordsarray() function.';
    $comment := '* The values are shortened to maximum 25 characters as per Saba spec';
    $comment := '* The shortened value if it ends with &:- or open bracket is trimmed.';
    $comment := '* @returns {Object}';
    $comment := '*******************************************************';
    $sabatagsobject := function(){(
        (
            $tagmaxlength:= 25;
			$maxtags := $globalMaxCount ? $globalMaxCount : 10;
			$padarray := [1..$maxtags].('');

			$tags := $sabakeywordsarray();

            $tags := $map($tags, function ($v, $i, $a) {(
				$badendofline:= /(([&:-]|[\x28])$)/;
                $result := $v ? $ellipsis($v,$tagmaxlength,'') : '';
                $result := $replace($result, $badendofline, '');
                $trim($result)
            )});

			$tags := $append($tags, $padarray);

			$tags := $filter($tags, function ($v, $i, $a) {
				$i < $maxtags
			});
			
			$tag_key_value_string_combined := $map($tags, function ($v, $i, $a) {
				'TAG' & ($i + 1) & '~|~' & $v
			});
			
			$convert_to_TAGn_values := $tag_key_value_string_combined.{$substringBefore('~|~'): $substringAfter('~|~')};
			
			$convert_to_TAGn_values
		);
    )};

    $comment := '*******************************************************';
    $comment := '* Create JSON object with CATEGORYn keys for populating CATEGORIES';
    $comment := '* in Saba the values are derived from this data:';
    $comment := '*   localizedMetadata[0].title if contentType.percipioType is channel';
    $comment := '*   associations.channels[*].title';
    $comment := '* @returns {Object}';
    $comment := '*******************************************************';
    $sabacategoriesobject := function($category){(
        (
            $basecategory:= $category ? $category: 'Skillsoft';
            $maxcategories := $globalMaxCount ? $globalMaxCount : 10;
            $padarray := [1..$maxcategories].('');

            $categories :=  $lowercase(contentType.percipioType) = 'channel' ? [$basecategory &'\\'&localizedMetadata[0].title] : $count(associations.channels) = 0 ? [$basecategory] : [];

            $categories := $append($categories, $map(associations.channels, function ($v, $i, $a) {
                $v.title ? $trim('SkillSoft\\'&$v.title) : ''
            }));
            
            $categories := $map($sort($categories), function ($v, $i, $a) {
                $i != 0 ? (($v = $a[$i - 1]) ? '' : $v) : $v
            });
            
            $categories := $filter($categories, function ($v, $i, $a) {
                $v != ''
            });
            $categories := $append($categories, $padarray);
            
            $categories := $filter($categories, function ($v, $i, $a) {
                $i < $maxcategories
            });

            $key_value_string_combined := $map($categories, function ($v, $i, $a) {
                'CATEGORY' & ($i + 1) & '~|~' & $v
            });
            
            $convert_to_values := $key_value_string_combined.{$substringBefore('~|~'): $substringAfter('~|~')};
            
            $convert_to_values
        );
    )};

    $comment := 'End of Saba Release 45  of Saba Specific Functions for use in transform';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'START OF TRANSFORM';

    $comment := '*******************************************************';
    $comment := 'Trasnsform the basic data';

   	$transformed_data := (
    	$.{
        'ID': '',
        'CONTENTTITLE': $sabatitle(),
        'NEW_CONTENTTITLE': $sabatitle(),
        'NEW_COURSETITLE': $sabatitle(),
        'CONTENTFORMAT': 'URL',
        'SPLIT': lifecycle.status = 'ACTIVE' ? 'World' : 'Archive',
        'PLAYERTEMPLATE': 'Percipio',
        'ZIPFILENAME': '',
        'CSFILESTITLE': '',
        'CSFILESRELATIVEPATH': '',
        'CREATEWBTCOURSE': 'TRUE',
        'MOBILECOMPATIBILITY': 'allDevices-responsive',
        'CONTENTFOLDER': 'PERCIPIO_CONTENT',
        'CONTENTTYPE': 'Website',
        'EXTERNALID': xapiActivityId,
        'COURSE_NO': id,
        'AVAILABLEOFFLINE': '',
        'VERSION': '',
        'CONTENTPROVIDER': 'Percipio_URL_Vendor',
        'DELIVERYVENDOR': 'Saba',
        'SECURECONTEXT': '',
        'CONTENTSERVER': 'Saba Default Content Server',
        'LOCATIONORURL': link,
        'LAUNCHURL': link,
        'CONTENTDESCRIPTION': localizedMetadata[0].description ? $sabadescription(2000) : '',
        'COURSE_ABSTRACT': localizedMetadata[0].description ? $sabadescription(1000) : '',
        'OWNER': 'SSADMIN',
        'SUREVALMRA': '',
        'ISSCORING': 'FALSE',
        'ESIGNATURE': '',
        'USEAICCBRIDGE': '',
        'ISSECURE': '',
        'AUTHOR': $count(by) = 0 ? 'Skillsoft' : $trim($substring($join(by, ', '), 0, 255)),
        'LANGUAGE': (
            $locale := $lookup([{
              'en': 'English',
              'fr': 'French',
              'de': 'German',
              'es': 'Spanish'
            }
          ], ($lowercase(localeCodes[0] ? $split(localeCodes[0],'-')[0] : 'en')));
            $locale ? $locale : 'English'
        ),
        'KEYWORDS' :  (
            $keywordsarray := $sabakeywordsarray();
            $count($keywordsarray) = 0 ? '' : $join($keywordsarray,',')
        ),
        'CONTENT_STATUS': lifecycle.status = 'ACTIVE' ? 'PUBLISHED' : 'ON_HOLD',
        'COURSE_IMAGE_URL': imageUrl,
        'DESCRIPTION': localizedMetadata[0].description ? $sabadescription(2000) : '',
        'DISPLAY_CALL_CENTER': lifecycle.status = 'ACTIVE' ? 'TRUE' : 'FALSE',
        'DISPLAY_LEARNER': lifecycle.status = 'ACTIVE' ? 'TRUE' : 'FALSE',
        'WBT_DURATION': $isodurationtohhmm(duration),
        'WBT_DESCRIPTION': localizedMetadata[0].description ? $sabadescription(2000) : '',
        'MARK_COMPLETE_EXTERNALLY': (
            $markComplete := $lookup([{
                'audiobook': 'TRUE',
                'book': 'TRUE',
                'channel': 'FALSE',
                'course': 'TRUE',
                'linked_content': 'TRUE',
                'video': 'TRUE'
              }
            ], $lowercase(contentType.percipioType)); $markComplete ? $markComplete : 'FALSE';
        ),
        'DELIVERY_TYPE': 'Skillsoft ' & contentType.displayLabel,
        'DISCONTINUE_FROM' : lifecycle.status = 'ACTIVE' ? '' : $substringBefore($now(),'T'),
        'EXPIRATIONDATE' : lifecycle.status = 'ACTIVE' ? '' : $substringBefore($now(),'T'),
        'DROP_REGISTRATIONS' : lifecycle.status = 'ACTIVE' ? '' : 'TRUE',
        'DISCONTINUE_ALL_ENROLLMENTS' : lifecycle.status = 'ACTIVE' ? '' : 'TRUE',
        'REMOVE_COURSE_FROM_ALL_PLANS': lifecycle.status = 'ACTIVE' ? '' : 'TRUE',
        'COURSE_HIDE_CLASSMATES': 'FALSE',
        'COURSE_TARGET_DAYS': 0
      }
    );

    $comment := '*******************************************************';
    $comment := 'Combine the :';
    $comment := '   $transformed_data - Basic transfomed data';
    $comment := '   $sabatagsobject - The TAGSn data derived from the function';
    $comment := '   $sabacategoriesobject - The CATEGORYn data derived from the function';

    $results := $merge([$transformed_data, $sabatagsobject(), $sabacategoriesobject()]);
    $results;
)