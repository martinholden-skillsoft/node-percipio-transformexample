$.(
    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'TRANSFORM FOR SUCCESSFACTORS METADATA';
    $comment := 'Author: Martin Holden';
    $comment := 'Date: 09-AUG-2019';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of Generic Function Library';

    $comment := '*******************************************************';
    $comment := '* Converts a string such as description to plain string,by stripping out';
    $comment := '* HTML tags and HTML Entities';
    $comment := '* @param {string} $source';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $plainstring := function ($source) {(
        $htmltags := /<\/?([a-z0-9]*)\b[^>]*>?/;
        $dash := /[\u2010\u2013\u2014\u2015]|&(#8210;|#8211;|#8212;|#8213;|hyphen|dash|ndash;|mdash;|horbar;)/;
        $apos := /&(#8217;|apos;|rsquo;)/;
        $copy := /[\u00A9]|&(#169;|copy;)/;
        $tm := /[\u2122]|&(#8482;|trade;)/;
        $registered := /[\u00AE]|&(#174;|reg;)/;
        $curylydoublequotes := /[\u201C\u201D\u201E\u201F\u2033\u2036]|&(ldquo;|rdquo;)/;
        $pipe := /[\u007c]|&(verbar;|vert;|VerticalLine;)/;
        $nbsp := /[\u00A0]|&(#160;|#xA0;|nbsp;)/;
        $otherentities := /&(#?[\w\d]+;)/;

        $result := $source ? $trim($source) : '';
        $result := $replace($result, $pipe, '-');
        $result := $replace($result, $htmltags, '');
        $result := $replace($result, $dash, '-');
        $result := $replace($result, $copy, '(c)');
        $result := $replace($result, $registered, '(r)');
        $result := $replace($result, $tm, '(tm)');
        $result := $replace($result, $apos, $base64decode('Jw=='));
        $result := $replace($result, $curylydoublequotes, '"');
        $result := $replace($result, $nbsp, ' ');
        $result := $replace($result, $otherentities, '');
        $result; 
    )};

    $comment := '*******************************************************';
    $comment := '* Shortens a string at a word boundary to the specified length, option to';
    $comment := '* define suffix to show this such as ...';
    $comment := '* @param {string} $source';
    $comment := '* @param {number} $maxlength - The maximum length, if $ellipsisString is';
    $comment := '*                                 the overall length allows for this';
    $comment := '* @param {string} $ellipsisString - The suffix to use';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $ellipsis := function ($source, $maxlength, $ellipsisString) {(
        $wordboundary := /\s(\w+)$/;
        $trimlength := $maxlength - $length($ellipsisString);

        $needtrim := ($length($source) > $maxlength);
        $trimmedSource := $needtrim ? $trim($substring($source, 0, $trimlength));

        $trimmedSource := $replace($trimmedSource, $wordboundary, '') & $ellipsisString;
        $needtrim ? $trimmedSource : $source;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a numeric value of total seconds';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';    
    $isodurationtoseconds := function ($isoduration) {(
        $input := $isoduration = null ? '' : $isoduration;
        $time := $substringAfter($input, 'T');
        $hours := $contains($time, 'H') ? $substringBefore($time, 'H') : '0';
        $remainder := $substringAfter($time, 'H');
        $minutes := $contains($remainder, 'M') ? $substringBefore($remainder, 'M') : '0';
        $remainder := $substringAfter($remainder, 'M');
        $seconds := $contains($remainder, 'S') ? $substringBefore($remainder, 'S') : '0';
        $result := (($number($hours) * 3600) + ($number($minutes) * 60) + $number($seconds));
        $result;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a numeric value of total minutes, to the specified precision';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @param {number} [$precision=2] - The precision';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';  
    $isodurationtominutes := function ($isoduration, $precision) {(
        $seconds := $isodurationtoseconds($isoduration);
        $prec := $exists($precision) ? $precision : 2;
        $result := $seconds = 0 ? 0 : $round($seconds / 60, $prec);
        $result;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a numeric value of total hours, to the specified precision';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @param {number} [$precision=2] - The precision';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';  
    $isodurationtohours := function ($isoduration, $precision) {(
        $seconds := $isodurationtoseconds($isoduration);
        $prec := $exists($precision) ? $precision : 2;
        $result := $seconds = 0 ? 0 : $round($seconds / 3600, $prec);
        $result;
    )};


    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a string in format hh:mm. No rounding so example would be 01:34';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';  
    $isodurationtohhmm := function ($isoduration) {(
        $input := $isoduration = null ? 'PT0H0M0S' : $isoduration;
        $time := $substringAfter($input, 'T');
        $hours := $contains($time, 'H') ? $substringBefore($time, 'H') : '00';
        $remainder := $contains($time, 'H') ? $substringAfter($time, 'H') : $time;
        $minutes := $contains($remainder, 'M') ? $substringBefore($remainder, 'M') : '00';
        $remainder := $substringAfter($remainder, 'M'); $seconds := $contains($remainder, 'S') ? $substringBefore($remainder, 'S') : '00';
        $result := $pad($hours, -2, '0') & ':' & $pad($minutes, -2, '0');
        $result;
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to a string in format hh:mm:ss. So example would be 01:34:56';
    $comment := '* @param {string} $isoduration - ISO8601 format duration';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';  
    $isodurationtohhmmss := function ($isoduration) {(
        $input := $isoduration = null ? 'PT0H0M0S' : $isoduration;
        $time := $substringAfter($input, 'T');
        $hours := $contains($time, 'H') ? $substringBefore($time, 'H') : '00';
        $remainder := $contains($time, 'H') ? $substringAfter($time, 'H') : $time;
        $minutes := $contains($remainder, 'M') ? $substringBefore($remainder, 'M') : '00';
        $remainder := $substringAfter($remainder, 'M'); $seconds := $contains($remainder, 'S') ? $substringBefore($remainder, 'S') : '00';
        $result := $pad($hours, -2, '0') & ':' & $pad($minutes, -2, '0') & ':' & $pad($seconds, -2, '0');
        $result;
    )};


    $comment := '*******************************************************';
    $comment := '* Take an array of objects, and return a JSON object where:';
    $comment := '*      JSON Key is $prefix with incrementing value e.g. KEY1, KEY2';
    $comment := '*      JSON Value is the value e.g. en-us, or if array of objects a';
    $comment := '*        $delimiter delimited string. e.g. en-us|Title1|Description1';
    $comment := '* @param {string} $source - The array';
    $comment := '* @param {string} $prefix - The prefix to use as the JSON Key';
    $comment := '* @param {number} [$maxCount=10] - The number of Keys';
    $comment := '* @param {string} [$delimiter=|] - The delimiter for Object strings';
    $comment := '* @returns {Object}';
    $comment := '*******************************************************';  
    $flattenArrayAndObject := function($source, $prefix, $maxCount, $delimiter) {(
        $maxCount := $maxCount ? $maxCount : 10;
        $delimiter := $delimiter ? $delimiter : '|';

        $padarray := [1..$maxCount].('');
        $sourceArray := $count($source)=0 ? [] : [];
        $result := '';
        
        $sourceArray := $append($sourceArray, $map($source, function ($v, $i, $a) {(
            $model := $count($keys($v)) > 0 ? $v : { 'key': $v ? $v : '' };
            $needdelimiter:= $count($keys($v)) > 0 ? $delimiter : '';
            $trimend:= $count($keys($v)) > 0;
            $kv := $spread($model);
            $result:= $reduce($kv, function($accum, $val) {(
                $accum & $each($val, function($val, $key) {$val}) & $needdelimiter;
            )}, '');
                $trimend ? $substring($result,0,$length($result)-1) : $result;
        )})
        );

        $sourceArray := $filter($sourceArray, function ($v, $i, $a) {
            $v != ''
        });

        $sourceArray := $append($sourceArray, $padarray);
    
        $sourceArray := $filter($sourceArray, function ($v, $i, $a) {
            $i < $maxCount
        });

        $sourceArrayDelimited := $map($sourceArray, function ($v, $i, $a) {
            $prefix & ($i + 1) & '~|~' & $v
        });

        $sourceArrayDelimited.{
            $substringBefore('~|~'): $substringAfter('~|~')
        }
    )};

    $comment := 'End of Generic Function Library';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of SuccessFactors Specific Functions for use in transform';

    $comment := '*******************************************************';
    $comment := '* The plain text version of the localizedMetadata[0].title';
    $comment := '* Shortened to $length with ellipsis string of ...';
    $comment := '* @param {number} [$length=300] - Maximum length';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';  
    $successfactorstitle := function($length){(
        $maxlength:= $length ? $length : 300;
        $ellipsis($plainstring(localizedMetadata[0].title), $maxlength, ' ...');
    )};

    $comment := '*******************************************************';
    $comment := '* Plain text version of the localizedMetadata[0].description. Shortened to';
    $comment := '* $length with ellipsis string of ...';
    $comment := '* @param {number} [$length=3500] - Maximum length';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';
    $successfactorsdescription := function($length){(
        $maxlength:= $length ? $length : 3500;
        $ellipsis($plainstring(localizedMetadata[0].description), $maxlength, ' ...');
    )};

    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format duration string such as PT1H34M56S';
    $comment := '* to the relevant numeric value needed for the SuccessFactors content';
    $comment := '* which is a number of hours to 2 decimals representing or 0';
    $comment := '* @returns {number}';
    $comment := '*******************************************************';  
    $successfactorsduration := function () {(
        $seconds := $isodurationtoseconds(duration);
        $prec := 2;
        $result := $round($seconds / 3600, $prec);
        $result ? $result : 0
    )};


    $comment := '*******************************************************';
    $comment := '* Converts and ISO8601 format timestamp such as 2019-08-13T13:14:15Z';
    $comment := '* to the relevant SuccessFactor format needed';
    $comment := '* @param {string} $timestamp - The ISO8601 timestamp';    
    $comment := '* @param {string} [$format=MON-DD-YYYY HH24:MI:SS] - The format to';
    $comment := '*                     which has the same syntax as fn:format-dateTime.';
    $comment := '*      https://www.w3.org/TR/xpath-functions-31/#func-format-dateTime';
    $comment := '* @param {string} [$tzoffset=] - The TimeZone Offset';
    $comment := '* @returns {string}';
    $comment := '*******************************************************';  
    $successfactorstimestamp := function ($timestamp, $format, $tzoffset) {(
        $formatToUse:= $format ? $format : '[MNn,*-3]-[D01]-[Y0001] [H01]:[m01]:[s01]';
        $tzToUse := $tzoffset ? $tzoffset;
        $fromMillis($toMillis($timestamp),$formatToUse,$tzToUse)
    )};

    $comment := 'End of SuccessFactors Specific Functions for use in transform';
    $comment := '*******************************************************';
    $comment := '*******************************************************';


    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'Start of SuccessFactors Constants';
    $comment := 'These are the values that can be changed per customer';

    $comment := '* The MAPPING between Percipio contentType.percipioType lowercase';
    $comment := '* and the visibility in the catalog. Y = VISIBLE, N = HIDDEN';
    $comment := '* This can be used to hide contentTypes if necessary.';
    $successfactors_SHOWINCATALOGMAP := {
        'audiobook': 'Y',
        'book': 'Y',
        'channel': 'Y',
        'course': 'Y',
        'linked_content': 'Y',
        'video': 'Y'
    };

    $comment := '* The MAPPING between Percipio contentType.percipioType lowercase';
    $comment := '* and the ONLINE status. Y = ONLINE, N = OFFLINE';
    $comment := '* This can be used to hide contentTypes if necessary.';
    $successfactors_ONLINESTATUS := {
        'audiobook': 'Y',
        'book': 'Y',
        'channel': 'Y',
        'course': 'Y',
        'linked_content': 'Y',
        'video': 'Y'
    };

    $comment := '* The MAPPING between Percipio localeCode to SuccessFactors locales';
    $comment := '* The PERCIPIO (left side) value is the RFC5646 Language Tag';
    $successfactors_LANGUAGEMAP := {
        'en': 'English',
        'fr': 'French',
        'fr-FR': 'French',
        'de': 'German',
        'de-DE': 'German',
        'es': 'Spanish',
        'es-ES': 'Spanish',
        'es-DO': 'Spanish'
    };

    $comment := '* The default SuccessFactors locale string to use if the map does not succeed';
    $successfactors_DEFAULTLANGUAGE := 'English';

    $comment := '* The MAPPING between Percipio contentType.percipioType lowercase';
    $comment := '* and any additions to the link';
    $comment := '* Returned value (right side) is the string to append to the link';
    $successfactors_LINKPARAMETERMAP := {
        'audiobook': '',
        'book': '',
        'channel': '',
        'course': '',
        'linked_content': '',
        'video': ''
    };
   
    $comment := '* The MAPPING between Percipio contentType.percipioType,';
    $comment := '* contentType.category, contentType.displayLabel in lowercase';
    $comment := '* combined with ~ delimiter to the SuccessFactors Component Types ';
    $successfactors_TYPEMAP := {
        'audiobook~audiobook~audiobook summary': 'AUDIO SUMMARY',
        'audiobook~audiobook~audiobook': 'AUDIOBOOK',
        'book~book~book': 'BOOK',
        'book~book~book review': 'BOOK',
        'book~book~book summary': 'BOOK SUMMARY',
        'channel~channel~channel': 'CHANNEL',
        'course~course~course': 'COURSE',
        'linked_content~assessment~testprep': 'LINKED CONTENT',
        'linked_content~~practice lab': 'LINKED CONTENT',
        'linked_content~~wintellect': 'LINKED CONTENT',
        'linked_content~course~course': 'LINKED CONTENT',
        'video~video~video': 'VIDEO'
    };

    $comment := '* The MAPPING between Percipio contentType.percipioType,';
    $comment := '* contentType.category, contentType.displayLabel in lowercase';
    $comment := '* combined with ~ delimiter to the SuccessFactors Completion Type';
    $successfactors_COMPLETIONMAP := {
        'audiobook~audiobook~audiobook summary': 'AUDIO-BK-SUMM-COMPL',
        'audiobook~audiobook~audiobook': 'AUDIO-BK-COMPL',
        'book~book~book': 'BOOK-COMPL',
        'book~book~book review': 'UNKNOWN',
        'book~book~book summary': 'BOOK-SUMM-COMPL',
        'channel~channel~channel': 'CHANNEL-COMPL',
        'course~course~course': 'COURSE-COMPL',
        'linked_content~assessment~testprep': 'LINKED-CTNT-COMPL',
        'linked_content~~practice lab': 'LINKED-CTNT-COMPL',
        'linked_content~~wintellect': 'LINKED-CTNT-COMPL',
        'linked_content~course~course': 'LINKED-CTNT-COMPL',
        'video~video~video': 'VIDEO-COMPL'
    };

    $comment := '* The default CATALOG that content will be created in within';
    $comment := '* SuccessFactors, the CATALOG must already exist.';
    $comment := '* This is used for the CATALOG_1 column.';
    $successfactors_DEFAULTCATALOG := 'EXTERNAL';

    $comment := '* The default CPNT_SRC_ID that content will be associated with in';
    $comment := '* SuccessFactors, the CPNT_SRC_ID must already exist.';
    $comment := '* This is used for the CPNT_SRC_ID column.';
    $successfactors_CPNTSRCID := 'SKILLSOFT';

    $comment := '* The default BUILD_COMPANY that content will be associated with in';
    $comment := '* SuccessFactors.';
    $comment := '* This is used for the BUILD_COMPANY column if the item does not have.';
    $comment := '* a association.parent';
    $successfactors_BUILDCOMPANY := 'Percipio';

    $comment := '* The default CHARGE BACK method that content will be associated with in';
    $comment := '* SuccessFactors.';
    $comment := '* This is used for the CHGBCK_METHOD column.';
    $successfactors_CHGBACKMETHOD := 1;

    $comment := '* The default format to use when converting ISO8601 timestamps';
    $comment := '* This has the same syntax as fn:format-dateTime.';
    $comment := '* https://www.w3.org/TR/xpath-functions-31/#func-format-dateTime';
    $successfactors_TIMESTAMPFORMAT := '[MNn,*-3]-[D01]-[Y0001] [H01]:[m01]:[s01][z]';
     
    $comment := '* The default TimeZone Offset to use when converting ISO8601 timestamps';
    $successfactors_TIMEZONEOFFSET := '-0500';

    $comment := 'End of SuccessFactors Constants';
    $comment := '*******************************************************';
    $comment := '*******************************************************';


    $comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'START OF TRANSFORM';

    $comment := '*******************************************************';
    $comment := 'Transform the basic data, uses the CONSTANTS specified above';

    $transformed_data := (
        $.{
            'CPNT_ID':id,
            'CPNT_TYP_ID': (
                $lookupVal:= $lowercase($join([$trim(contentType.percipioType),$trim(contentType.category),$trim(contentType.displayLabel)],'~'));
                $result := $lookup($successfactors_TYPEMAP, $lookupVal);
                $result;
            ),
            'NOTACTIVE': lifecycle.status = 'ACTIVE' ? 'N' : 'Y',
            'CPNT_TITLE': localizedMetadata[0].title ? $successfactorstitle() : '',
            'DEL_MTH_ID':  (
                $lookupVal:= $lowercase($join([$trim(contentType.percipioType),$trim(contentType.category),$trim(contentType.displayLabel)],'~'));
                $result := $lookup($successfactors_TYPEMAP, $lookupVal);
                $result;
            ),
            'HTML_CPNT_DESC': localizedMetadata[0].description ? $successfactorsdescription() : '',
            'CMPL_STAT_ID': (
                $lookupVal:= $lowercase($join([$trim(contentType.percipioType),$trim(contentType.category),$trim(contentType.displayLabel)],'~'));
                $result := $lookup($successfactors_COMPLETIONMAP, $lookupVal);
                $result;
            ),
            'CREDIT_HRS': $successfactorsduration(),
            'SHOW_IN_CATALOG': (
                $localVisibility := $lookup($successfactors_SHOWINCATALOGMAP, $lowercase(contentType.percipioType));
                $localVisibility ? $localVisibility : 'Y'
            ),
            'CATALOG_1':  $successfactors_DEFAULTCATALOG,
            'APP_ID': id,
            'BUILD_COMPANY': (
                associations.parent = null ? $successfactors_BUILDCOMPANY : associations.parent.title
            ),
            'CONTENT_ONLINE': (
                $contentOnline := $lookup($successfactors_ONLINESTATUS, $lowercase(contentType.percipioType));
                $contentOnline ? $contentOnline : 'Y'
            ),
            'LAUNCH_TYPE': 3,
            'PRIMARY_PARAM': (
                $urlparameter := $lookup($successfactors_LINKPARAMETERMAP, $lowercase(contentType.percipioType));
                link & $urlparameter
            ),
            'ITEM_ONLINE': (
                $itemOnline := $lookup($successfactors_ONLINESTATUS, $lowercase(contentType.percipioType));
                $itemOnline ? $itemOnline : 'Y'
            ),
            'MODULE_NAME': localizedMetadata[0].title ? $successfactorstitle() : '',
            'THUMBNAIL_URI': imageUrl ? imageUrl : '',
            'LOCALE': (
                $locale := $lookup($successfactors_LANGUAGEMAP, $lowercase(localeCodes[0]));
                $comment := 'If we dont get an exact match try the langauge only, the value before the - i.e. fr-FR -> fr';
                $locale := $locale ? $locale : $lookup($successfactors_LANGUAGEMAP, $trim($split($lowercase(localeCodes[0]),'-')[0]));
                $locale ? $locale : $successfactors_DEFAULTLANGUAGE
            ),
            'LAUNCH_IN_A_NEW_BWSR_WINDOW': 'Y',
            'REV_DTE': lifecycle.lastUpdatedDate ? $successfactorstimestamp(lifecycle.lastUpdatedDate, $successfactors_TIMESTAMPFORMAT, $successfactors_TIMEZONEOFFSET) : '',
            'CPNT_SRC_ID': $successfactors_CPNTSRCID,
            'CREATE_DTE': lifecycle.publishDate ? $successfactorstimestamp(lifecycle.publishDate, $successfactors_TIMESTAMPFORMAT, $successfactors_TIMEZONEOFFSET) : '',
            'CHGBCK_METHOD': $successfactors_CHGBACKMETHOD
        }
    );

    $comment := '*******************************************************';
    $comment := 'Combine the :';
    $comment := '   $transformed_data - Basic transfomed data';

    $results := $transformed_data;
    $results;
)